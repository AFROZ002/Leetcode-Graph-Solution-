class Solution {
  public boolean canFinish(int numCourses, int[][] prerequisites) {

    int[] indegree = new int[numCourses];
    List[] graph = new ArrayList[numCourses];

    for(int i = 0; i < numCourses; i++){
      graph[i] = new ArrayList();
    }

    for(int[] pre : prerequisites) {
      int dest = pre[0];
      int src = pre[1];
      graph[src].add(dest);
      indegree[dest]++;
    }  

    Queue<Integer> queue = new LinkedList();
    for(int i = 0; i < numCourses; i++){ 
      if(indegree[i] == 0) queue.add(i);
    }

    int count = 0;
    while(!queue.isEmpty()) {
      int node = queue.remove();
      count++;

      for(int i = 0; i < graph[node].size(); i++) {
        int neigh = (int) graph[node].get(i);

        indegree[neigh]--;
        if(indegree[neigh] == 0) queue.add(neigh);
      }
    }

    return count == numCourses;
  }
}