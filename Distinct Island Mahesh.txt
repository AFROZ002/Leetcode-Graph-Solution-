import java.util.*;

public class Solution {
    public static int distinctIsland(int[][] arr, int n, int m) {
        boolean[][] vis = new boolean[n][m];
        HashSet<ArrayList<String>> set = new HashSet<>();
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (!vis[i][j] && arr[i][j] == 1) {
                    ArrayList<String> vec = new ArrayList<>();
                    dfs(i, j, arr, vis, vec, i, j);
                    set.add(vec);
                }
            }
        }
        return set.size();
    }
    public static void dfs(int row, int col, int[][] arr, boolean[][] vis, ArrayList<String> vec, int row0, int col0) {
        vis[row][col] = true;
        vec.add(toString(row - row0, col - col0));
        int n = arr.length;
        int m = arr[0].length;
        int[] di = { -1, 0, 1, 0 };
        int[] dj = { 0, 1, 0, -1 };
        for (int k = 0; k < 4; ++k) {
            int nrow = row + di[k];
            int ncol = col + dj[k];
            if (nrow >= 0 && ncol >= 0 && nrow < n && ncol < m && arr[nrow][ncol] == 1 && (!vis[nrow][ncol])) {
                vis[nrow][ncol] = true;
                vec.add(toString(nrow - row0, ncol - col0));
                dfs(nrow,ncol,arr,vis,vec,row0,col0);
            }
        }
    }
    public static String toString(int r, int c) {
        return Integer.toString(r) + " " + Integer.toString(c);
    }
}