
/*Complete the function below*/


class Solution
{
    //Function to return list containing vertices in Topological order.
    public static void dfs(int node, Stack<Integer> st, ArrayList<ArrayList<Integer>> adj, boolean[] vis)
    {
        vis[node] = true;
        for (int it : adj.get(node)) {
            if (!vis[it]) {
                dfs(it, st, adj, vis);
            }
        }
        st.push(node);
    }

    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj)
    {
        // add your code here
        boolean[] vis = new boolean[V];
        Stack<Integer> st = new Stack<Integer>(); 
 
        for (int i = 0; i < V; ++i) {
            if (!vis[i]) {
                dfs(i, st, adj, vis);
            }
        }

        int[] ans = new int[V];

        int i = 0;
        while (!st.isEmpty()) {
            ans[i++] = st.peek();
            st.pop();
        }
        return ans;
    }
}
