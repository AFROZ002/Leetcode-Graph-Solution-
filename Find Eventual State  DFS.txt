class Solution {
    public static boolean dfscheck(int node,List<List<Integer>> adj,int vis[],
    int [] pathvis,int check[]){
        vis[node]=1;
        pathvis[node]=1;
        check[node]=1;
        for(int it:adj.get(node)){
            if(vis[it]==0){
                if(dfscheck(it,adj,vis,pathvis,check)==true)
                return true;
            }
        
        else if(pathvis[it]==1){
            return true;
        }
    }
    check[node]=1;
    pathvis[node]=0;
    return false;
}

    List<Integer> eventualSafeNodes(int V, List<List<Integer>> adj) {

        // Your code here
        int vis[]=new int [V];
        int pathvis[]=new int[V];
        int check[]=new int [V];
      for(int i=0;i<V;++i){
          if(vis[i]==0){
              
              dfscheck(i,adj,vis,pathvis,check);
              
          }
      }
      List<List<Integer>>safeNodes=new ArrayList<>();
      for(int i=0;i<V;++i){
          if(check[i]==1)
          safeNodes.add(i);
          }
          return safeNodes;
        
        
    }
}