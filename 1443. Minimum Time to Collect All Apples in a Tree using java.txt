class Solution {
    public int minTime(int n, int[][] edges, List<Boolean> hasApple) {
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < n; i++) {
            graph.add(new ArrayList<>()); 
        }

        for(int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            graph.get(u).add(v);
            graph.get(v).add(u);
        }

        boolean[] visited = new boolean[n];
        int[] dist = new int[n];
        dfs(graph, 0, visited, dist, hasApple);

        int ans = 0;
        for(int i = 0; i < n; i++) {
            if(dist[i] > 0) {
                ans += 2 * (dist[i] - 1); 
            }
        }

        return ans;
    }

    void dfs(List<List<Integer>> graph, int node, boolean[] visited, int[] dist, List<Boolean> hasApple) {
        visited[node] = true;
        for(int nei : graph.get(node)) {
            if(!visited[nei]) {
                dist[nei] = dist[node] + 1; 
                dfs(graph, nei, visited, dist, hasApple);
                if(hasApple.get(nei)) {
                    dist[node] += dist[nei];
                }
            }
        }
    }
}