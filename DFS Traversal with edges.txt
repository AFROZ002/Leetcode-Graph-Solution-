import java.util.ArrayList;

public class Solution {
  public static ArrayList<Integer>[] makeadj(int v, ArrayList<ArrayList<Integer>> edges) {
    ArrayList<Integer>[] adj = new ArrayList[v];
    for(int i = 0; i < v; i++) {
      adj[i] = new ArrayList<>(); 
    }
    
    for(ArrayList<Integer> edge: edges) {
      int u = edge.get(0);
      int V = edge.get(1);
      adj[u].add(V);
      adj[V].add(u); 
    }
    
    return adj;
  }
  
  public static void dfs(int node, boolean[] vis, ArrayList<Integer>[] adj, ArrayList<Integer> ans) {
    vis[node] = true;
    ans.add(node);
    
    
    for(int it: adj[node]) {
      if(!vis[it]) {
        dfs(it, vis, adj, ans);  
      }
    }
  }
  
  public static ArrayList<ArrayList<Integer>> depthFirstSearch(int v, int e, ArrayList<ArrayList<Integer>> edges) {
    ArrayList<Integer>[] adj = makeadj(v, edges);
    boolean[] vis = new boolean[v];
    
    ArrayList<ArrayList<Integer>> finalAns = new ArrayList<>();
    
    for(int i = 0; i < v; i++) {
      if(!vis[i]) {
        ArrayList<Integer> ans = new ArrayList<>();
        dfs(i, vis, adj, ans);
        finalAns.add(new ArrayList<>(ans));

      }
    }
     
   
    return finalAns;
   
  }
}